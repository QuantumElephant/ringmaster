# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
import secret

#
# script-wide vars
#
horton_release_repo = secret.horton_release_repo
horton2_repo =  secret.horton2_repo


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [buildslave.BuildSlave("bot-f21-x64-deps", secret.bot-f21-x64-deps),
               buildslave.BuildSlave("bot-u15-04", secret.bot_u15-04),
               buildslave.BuildSlave("bot-f21-x64-deps-2", secret.bot_f21-x64-deps-2),
               buildslave.BuildSlave("bot-u15-04-2", secret.bot_u15-04-2),
               buildslave.BuildSlave("bot-osx10-10", secret.bot_osx10-10),
                ]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        horton_release_repo,
        workdir='gitpoller-workdir-release', branch='prerelease',
        pollinterval=180))

c['change_source'].append(changes.GitPoller(
        horton2_repo,
        workdir='gitpoller-workdir-2', branches=True,
        pollinterval=180))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

c['builders'] = []
release_builder = []
dev_builder = []

def builder_name(name, repourl, builder_list):
    result = name+"-"+repourl.split("/")[-1]
    builder_list.append(result)
    return result

#
# Standard build
#

def add_standard_build(repourl, builder_list):
    factory = util.BuildFactory()
    # check out the source
    factory.addStep(steps.Git(repourl=repourl, mode='full', clobberOnFailure=True))
    # build refatoms
    factory.addStep(steps.ShellCommand(command=["make", "-C", "data/refatoms"]))
    # set matplotlibrc
    factory.addStep(steps.ShellCommand(command="echo \"backend: Agg\" > $MATPLOTLIBRC/matplotlibrc",
                                       env={"MATPLOTLIBRC":util.Property("workdir")}))
    # build everything
    factory.addStep(steps.ShellCommand(command=["./setup.py", "build_ext", "-i"],
                                       env={"MATPLOTLIBRC":util.Property("workdir")}))
    # run the tests
    factory.addStep(steps.ShellCommand(command=["nosetests", "-v"],
                                       env={"MATPLOTLIBRC":util.Property("workdir")}))

    c['builders'].append(
        util.BuilderConfig(name=builder_name("f21-full-test", repourl, builder_list),
          slavenames=["bot-f21-x64-deps",
                      "bot-f21-x64-deps-2",
                        ],
          factory=factory))

add_standard_build(horton_release_repo, release_builder)
add_standard_build(horton2_repo, dev_builder)

#
# Standard build and deps build
#

def add_standard_build_w_deps(repourl, builder_list):
    factory = util.BuildFactory()
    # check out the source
    factory.addStep(steps.Git(repourl=repourl, mode='full', clobberOnFailure=True))
    # build deps
    factory.addStep(steps.ShellCommand(command=["make", "-C", "depends", "libxc"]))
    factory.addStep(steps.ShellCommand(command=["make", "-C", "depends", "libint"]))
    # build refatoms
    factory.addStep(steps.ShellCommand(command=["make", "-C", "data/refatoms"]))
    # set matplotlibrc
    factory.addStep(steps.ShellCommand(command="echo \"backend: Agg\" > $MATPLOTLIBRC/matplotlibrc",
                                       env={"MATPLOTLIBRC":util.Property("workdir")}))
    # build everything
    factory.addStep(steps.ShellCommand(command=["./setup.py", "build_ext", "-i"],
                                       env={"MATPLOTLIBRC":util.Property("workdir")}))
    # run the tests
    factory.addStep(steps.ShellCommand(command=["nosetests", "-v"],
                                       env={"MATPLOTLIBRC":util.Property("workdir")}))

    c['builders'].append(
        util.BuilderConfig(name=builder_name("f21-full-test-deps", repourl, builder_list),
          slavenames=["bot-f21-x64-deps",
                      "bot-f21-x64-deps-2",
                        ],
          factory=factory))

add_standard_build_w_deps(horton_release_repo, release_builder)
add_standard_build_w_deps(horton2_repo, dev_builder)


#
# Standard Ubuntu build and deps build
#

def add_standard_ubuntu_build_w_deps(repourl, builder_list):
    factory = util.BuildFactory()
    # check out the source
    factory.addStep(steps.Git(repourl=repourl, mode='full', clobberOnFailure=True))
    # build deps
    factory.addStep(steps.ShellCommand(command=["make", "-C", "depends", "libxc"]))
    factory.addStep(steps.ShellCommand(command=["make", "-C", "depends", "libint"]))
    # build refatoms
    factory.addStep(steps.ShellCommand(command=["make", "-C", "data/refatoms"]))
    # set matplotlibrc
    factory.addStep(steps.ShellCommand(command="echo \"backend: Agg\" > $MATPLOTLIBRC/matplotlibrc",
                                       env={"MATPLOTLIBRC":util.Property("workdir")}))
    # build everything
    factory.addStep(steps.ShellCommand(command=["./setup.py", "build_ext", "-i"],
                                       env={"MATPLOTLIBRC":util.Property("workdir")}))
    # run the tests
    factory.addStep(steps.ShellCommand(command=["nosetests", "-v"],
                                       env={"MATPLOTLIBRC":util.Property("workdir")}))

    c['builders'].append(
        util.BuilderConfig(name=builder_name("u15-full-test-deps", repourl, builder_list),
          slavenames=["bot-u15-04",
                      "bot-u15-04-2",
                        ],
          factory=factory))

add_standard_ubuntu_build_w_deps(horton_release_repo, release_builder)
add_standard_ubuntu_build_w_deps(horton2_repo, dev_builder)


#
# Standard OSX build and deps build
#

def add_standard_osx_build_w_deps(repourl, builder_list):
    factory = util.BuildFactory()
    # check out the source
    factory.addStep(steps.Git(repourl=repourl, mode='full', clobberOnFailure=True))
    # build deps
    factory.addStep(steps.ShellCommand(command=["make", "-C", "depends", "libxc"]))
    factory.addStep(steps.ShellCommand(command=["make", "-C", "depends", "libint"]))
    # build refatoms
    factory.addStep(steps.ShellCommand(command=["make", "-C", "data/refatoms"]))
    # build everything
    factory.addStep(steps.ShellCommand(command=["./setup.py", "build_ext", "-i"],
                                        env={"CC":"gcc", "CXX":"g++"}))
    # run the tests
    factory.addStep(steps.ShellCommand(command=["nosetests", "-v"]))

    c['builders'].append(
        util.BuilderConfig(name=builder_name("osx1010-full-test-deps", repourl, builder_list),
          slavenames=["bot-osx10-10",
                        ],
          factory=factory))

add_standard_osx_build_w_deps(horton_release_repo, release_builder)
add_standard_osx_build_w_deps(horton2_repo, dev_builder)

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

#TODO: add filtering for doc changes and doc builds



c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
                            name="dev",
                            change_filter=util.ChangeFilter(branch_re='prerelease-.*'),
                            treeStableTimer=None,
                            builderNames=dev_builder))

c['schedulers'].append(schedulers.AnyBranchScheduler(
                            name="release",
                            change_filter=util.ChangeFilter(branch='prerelease'),
                            treeStableTimer=None,
                            builderNames=release_builder))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=dev_builder+release_builder))




####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([secret.webauth]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))




from buildbot.status.mail import MailNotifier

mail_notifier = MailNotifier(
    mode="failing",
    fromaddr=secret.email_from,
    sendToInterestedUsers=True,
    extraRecipients=secret.email_to,
    lookup=,
    relayhost=secret.email_from, smtpPort=587,
    smtpUser=email_from,
    smtpPassword=email_pw,
    )

c['status'].append(mail_notifier)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Horton"
c['titleURL'] = "https://www.github.com/theochem/horton"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
