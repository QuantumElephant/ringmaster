# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import buildslave, steps, util, schedulers, status
from secrets import s

#
# script-wide vars
#
horton_release_repo = s['horton_release_repo']
horton2_repo =  s['horton2_repo']

repos = ((horton_release_repo, []),
         (horton2_repo, []),
         )

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [buildslave.BuildSlave("bot-fedora-x64-deps", s['bot-fedora-x64-deps']),
               buildslave.BuildSlave("bot-ubuntu", s['bot-ubuntu']),
               buildslave.BuildSlave("bot-fedora-x64-deps-2", s['bot-fedora-x64-deps-2']),
               buildslave.BuildSlave("bot-ubuntu-2", s['bot-ubuntu-2']),
               buildslave.BuildSlave("bot-osx10-10", s['bot-osx10-10']),
                ]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

#c['change_source'] = []
#c['change_source'].append(changes.GitPoller(
#        horton_release_repo,
#        workdir='gitpoller-workdir-release', branch='prerelease',
#        pollinterval=180))
#
#c['change_source'].append(changes.GitPoller(
#        horton2_repo,
#        workdir='gitpoller-workdir-2', branches=True,
#        pollinterval=180))
#
## Also point to the github_buildbot.py http server
#c['change_source'].append(PBChangeSource(user='github', passwd='github.horton'))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

c['builders'] = []

def builder_name(name, repourl):
    result = name+"-"+repourl.split("/")[-1]
    return result


def repo_name(repourl):
    return repourl.split("/")[-1]

def build_generic(name, slavenames, repourl, factory):
    c['builders'].append(
        util.BuilderConfig(name=name,
                           slavenames=slavenames,
                           factory=factory,
                           properties={
                      "github_repo_owner": "matt_chan",
                      "github_repo_name": repo_name(repourl),
          }
                           ))

def build_fedora(repourl, factory):
    name = "fedora-full-test"
    slavenames=["bot-fedora-x64-deps",
                  "bot-fedora-x64-deps-2",
                    ]
    build_generic(name, slavenames, repourl, factory)
    return builder_name(name, repourl)

def build_fedora_deps(repourl, factory):
    name = "fedora-full-test-deps"
    slavenames=["bot-fedora-x64-deps",
                      "bot-fedora-x64-deps-2",
                        ]
    build_generic(name, slavenames, repourl, factory)
    return builder_name(name, repourl)

def build_ubuntu(repourl, factory):
    name = "ubuntu-full-test-deps"
    slavenames=["bot-ubuntu",
                      "bot-ubuntu-2",
                        ]
    build_generic(name, slavenames, repourl, factory)
    return builder_name(name, repourl)

def build_osx1010(repourl, factory):
    name = "osx1010-full-test-deps"
    slavenames=["bot-osx10-10",
                        ]
    build_generic(name, slavenames, repourl, factory)
    return builder_name(name, repourl)

#
# Standard build
#

def linux_factory(repourl):
    factory = util.BuildFactory()
    # check out the source
    factory.addStep(steps.Git(repourl=repourl, mode='full', clobberOnFailure=True))
    # # build refatoms
    # factory.addStep(steps.ShellCommand(command=["make", "-C", "data/refatoms"]))
    # # set matplotlibrc
    # factory.addStep(steps.ShellCommand(command="echo \"backend: Agg\" > $MATPLOTLIBRC/matplotlibrc",
    #                                    env={"MATPLOTLIBRC":util.Property("workdir")}))
    # # build everything
    # factory.addStep(steps.ShellCommand(command=["./setup.py", "build_ext", "-i"],
    #                                    env={"MATPLOTLIBRC":util.Property("workdir")}))
    # # run the tests
    # factory.addStep(steps.ShellCommand(command=["nosetests", "-v"],
    #                                    env={"MATPLOTLIBRC":util.Property("workdir")}))
    factory.addStep(steps.ShellCommand(command=["tools/qa/test_all_master.sh"]))

    return factory

def linux_factory_w_deps(repourl):
    factory = util.BuildFactory()
    # check out the source
    factory.addStep(steps.Git(repourl=repourl, mode='full', clobberOnFailure=True))
    # build deps
    factory.addStep(steps.ShellCommand(command=["make", "-C", "depends", "libxc"]))
    factory.addStep(steps.ShellCommand(command=["make", "-C", "depends", "libint"]))
    # build refatoms
    factory.addStep(steps.ShellCommand(command=["make", "-C", "data/refatoms"]))
    # set matplotlibrc
    factory.addStep(steps.ShellCommand(command="echo \"backend: Agg\" > $MATPLOTLIBRC/matplotlibrc",
                                       env={"MATPLOTLIBRC":util.Property("workdir")}))
    # build everything
    factory.addStep(steps.ShellCommand(command=["./setup.py", "build_ext", "-i"],
                                       env={"MATPLOTLIBRC":util.Property("workdir")}))
    # run the tests
    factory.addStep(steps.ShellCommand(command=["nosetests", "-v"],
                                       env={"MATPLOTLIBRC":util.Property("workdir")}))

    return factory


def osx_factory(repourl):
    factory = util.BuildFactory()
    # check out the source
    factory.addStep(steps.Git(repourl=repourl, mode='full', clobberOnFailure=True))
    # build refatoms
    factory.addStep(steps.ShellCommand(command=["make", "-C", "data/refatoms"]))
    # build everything
    factory.addStep(steps.ShellCommand(command=["./setup.py", "build_ext", "-i"],
                                        env={"CC":"gcc", "CXX":"g++"}))
    # run the tests
    factory.addStep(steps.ShellCommand(command=["nosetests", "-v"]))

    return factory

builder_handle_tup = (
    (build_fedora, (linux_factory, ))
    (build_fedora_deps, (linux_factory_w_deps, ))
    (build_ubuntu, (linux_factory, ))
    (build_osx1010, (osx_factory, ))
)


for t in builder_handle_tup:
    build_handle = t[0]
    for fh in t[1]:
        for r,r_list in repos:
            factory = fh(r)
            name = build_handle(r, factory)
        r_list.append(name)


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

#TODO: add filtering for doc changes and doc builds



c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
                            name="dev",
                            change_filter=util.ChangeFilter(branch_re='prerelease-.*'),
                            treeStableTimer=None,
                            builderNames=repos[0][1]))

c['schedulers'].append(schedulers.AnyBranchScheduler(
                            name="release",
                            change_filter=util.ChangeFilter(branch='prerelease'),
                            treeStableTimer=None,
                            builderNames=repos[1][1]))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=repos[0][1]+repos[1][1]))




####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([s['web_auth']]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
dialects = {'github' : {
                'secret' : s['changehook_s'],
                'strict' : True,
                     },
           }
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg, 
                                    change_hook_dialects=dialects))




from buildbot.status.mail import MailNotifier

mail_notifier = MailNotifier(
    mode="failing",
    fromaddr=s['email_from'],
    sendToInterestedUsers=True,
    extraRecipients=s['email_to'],
    lookup="",
    relayhost=s['email_from'], smtpPort=587,
    smtpUser=s['email_from'],
    smtpPassword=s['email_pw'],
    )

c['status'].append(mail_notifier)

repoOwner = util.Interpolate("%(prop:github_repo_owner)s")
repoName = util.Interpolate("%(prop:github_repo_name)s")
sha = util.Interpolate("%(src::revision)s")
gs = status.GitHubStatus(token=s['github_token'],
                         repoOwner=repoOwner,
                         repoName=repoName,
                         sha=sha,
                         startDescription='Performing...',
                         endDescription='Show\'s over!')
c['status'].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Horton"
c['titleURL'] = "https://www.github.com/theochem/horton"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
